<html>
	<head>
		<title>BadgerCam</title>
		<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
		<meta http-equiv="Pragma" content="no-cache" />
		<meta http-equiv="Expires" content="0" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link href="/styles/main.css" rel="stylesheet" type="text/css" />
		<link href="/styles/fontawesome-all.css" rel="stylesheet" type="text/css" />
		<script src="/scripts/jquery-3.5.1.min.js"></script>
		<script src="/socket.io/socket.io.js"></script>
	</head>
	<body>
		<div class = "container-overlay" id = "container-overlay">
		</div>

		<div class = "container-settings" id = "container-settings">
			<h3>Settings</h3>
			<table>
				<tr>
					<td title = "Choose whether to group by date or device">
						Grouping
					</td>
					<td>
						<select id = "grouping-select" autocomplete="off">
							<option value = "date" <% if (settings.grouping == 'date' || settings.grouping === undefined){ %>selected=selected<% } %>>Date</option>
							<option value = "camera" <% if (settings.grouping == 'camera'){ %>selected=selected<% } %>>Device</option>
						</select>
					</td>
				</tr>
				<tr>
					<td title = "Ordering (ascending or descending) for each menu group">
						Ordering
					</td>
					<td>
						<select id = "sorting-select" autocomplete="off">
							<option value = "asc" <% if (settings.sorting == 'asc' || settings.sorting === undefined){ %>selected=selected<% } %>>Ascending</option>
							<option value = "desc" <% if (settings.sorting == 'desc'){ %>selected=selected<% } %>>Descending</option>
						</select>
					</td>
				</tr>
				<tr>
					<td title = "Groups can be collapsed when you load the page. Click each header to uncollapse">
						Groups collapsed
					</td>
					<td>
						<select id = "groups-collapsed-select" autocomplete="off">
							<option value = "no" <% if (settings.groupsCollapsed == 'no' || settings.groupsCollapsed === undefined){ %>selected=selected<% } %>>No</option>
							<option value = "yes" <% if (settings.groupsCollapsed == 'yes'){ %>selected=selected<% } %>>Yes</option>
						</select>
					</td>
				</tr>
				<tr><td colspan="2">&nbsp;</td></tr>
				<tr>
					<td>
						<center><input type = "button" value = "Cancel" onclick="closeSettings();"></center>
					</td>
					<td>
						<center><input type = "button" value = "Save settings" onclick="updateSettings();"></center>
					</td>
				</tr>
			</table>
		</div>

		<div class = "container-sync-status" id = "container-sync-status">
			<h3>Sync status</h3>
			<div id = "container-sync-status-log"></div>
			<button onclick = "hideSync()">
				Hide status window
			</button>
		</div>

		<div class = "container-main">

			<!-- Left menu -->
			<div class = "container-menu">
				<!-- Header -->
				<div class = "container-header">
					<img src = "/imgs/header-transparent.png" class = "header-image"/>
				</div>

				<div id = "container-menu-content" class = "container-menu-content">

					<% for (let group of videoGroups) { %>
						<div class = "menu-group<% if (settings.groupsCollapsed == 'yes') { %> hidden<% } %>">
							<div class = "menu-group-header" onclick = "toggleMenuGroup(this);">
								<%= group.key %>
							</div>

							<% for (let fileInfo of group.files) { %>
								<div class = "menu-entry no-select-text<% if(fileInfo['marked']){%> marked<% } %>" id = "menuentry_<%= fileInfo.id %>" video-id = "<%= fileInfo.id %>" camera = "<%= fileInfo['camera_name'] %>" video-date = "<%= fileInfo['date'] %>" video-time = "<%= fileInfo['time'] %>" video-file = "<%= fileInfo['file'] %>" onclick="playVideo(this);">
									<%= fileInfo['display'] %>
								</div>
							<% } %>
						</div>
					<% } %>
				</div>
			</div>

			<!-- Main content -->
			<div class = "container-content">

				<div class = "container-content-wrapper">
					<!-- Controls -->
					<div class = "container-controls">
						<div class = "container-navigation">
							<button onclick = "playPrevGroup()">
								<i class="fas fa-fast-backward"></i> <span>Prev group</span>
							</button>
							<button onclick = "playPrev()">
								<i class="fas fa-step-backward"></i> <span>Prev video</span>
							</button>
							<button onclick = "playNext()">
								<span>Next video</span> <i class="fas fa-step-forward"></i>
							</button>
							<button onclick = "playNextGroup()">
								<span>Next group</span> <i class="fas fa-fast-forward"></i>
							</button>
						</div>
						<div class = "container-options">
							<button title = "Removes converted video locally but keeps original video file (just in case)" onclick = "removeCurrentVideo();">
								<i class="fas fa-trash-alt"></i> <span>Remove</span>
							</button>
							<button title = "Important videos are highlighted in the menu" onclick = "toggleMarkedOnCurrentVideo();">
								<i id = "star-button-icon" class="far fa-star"></i> <span id = "star-button-text">Star/Unstar</span>
							</button>
							<button onclick = "doSync()">
								<i class="fas fa-sync"></i> <span>Manual sync</span>
							</button>
							<button onclick = "showSettings()">
								<i class="fas fa-cog"></i> <span>Settings</span>
							</button>
						</div>
					</div>

					<!-- Video player -->
					<div class = "container-video">
						<video id = "video-source" controls autoplay muted></video>

						<div class = "container-video-info">
							<span id = "video-info-camera"></span> 
							<span id = "video-info-date"></span> 
							<span id = "video-info-time"></span> 
						</div>
					</div>

					<div id = "switch-to-landscape-info"></div>
				</div>
			</div>
		</div>

		<script type = "text/javascript">
			// Hide all elements by default
			$("#container-overlay").hide();
			$("#container-settings").hide();
			$("#container-sync-status").hide();

			<% if (selected) { %>
				playVideo($("#menuentry_<%= selected %>"));
			<% } else { %>
				playVideo($(".menu-entry").first());
			<% } %>
			scrollToMenu();

			window.addEventListener("orientationchange", handleOrientationChange, false);
			handleOrientationChange();	// Trigger on load too

			var socket = io();
			socket.on('starting_new_sync', handleSyncStart);
			socket.on('sync_update', handleSyncUpdate);

			function playPrev() {
				let el = $(".menu-entry.selected").prev(".menu-entry");
				if (el.length != 0) {
					playVideo(el);
				} else {
					playVideo($(".menu-entry.selected").parent().prev(".menu-group").children(".menu-entry").last());
				}
				scrollToMenu();
			}

			function playPrevGroup() {
				playVideo($(".menu-entry.selected").parent().prev(".menu-group").children(".menu-entry").first());
				scrollToMenu();
			}

			function playNext() {
				let el = $(".menu-entry.selected").next(".menu-entry");
				if (el.length != 0) {
					playVideo(el);
				} else {
					playVideo($(".menu-entry.selected").parent().next(".menu-group").children(".menu-entry").first());
				}
				scrollToMenu();
			}

			function playNextGroup() {
				playVideo($(".menu-entry.selected").parent().next(".menu-group").children(".menu-entry").first());
				scrollToMenu();
			}

			function playVideo(el) {
				if ($(el).hasClass("selected")) {
					return;
				} else if (!el || el.length == 0) {
					console.log("Warning! Tried to select non-existant menu item!");
					return;
				}

				$("#video-info-noselected").hide();
				$("#video-source").attr('src', $(el).attr("video-file"));
				$("#video-info-camera").html($(el).attr("camera"));
				$("#video-info-date").html($(el).attr("video-date"));
				$("#video-info-time").html($(el).attr("video-time"));

				if (isMenuGroupHidden($(el))){
					toggleMenuGroup($(el));
				}

				$(".menu-entry.selected").removeClass("selected");
				$(el).addClass("selected");
				updateStarButton();

				let videoId = $(el).attr("video-id");
				window.history.pushState("badgercam", "BadgerCam", changeUrl({"selected": videoId}));
			}

			function removeCurrentVideo() {
				let currentVideo = $(".menu-entry.selected").first();
				$.get("/remove", {"videoId": currentVideo.attr("video-id")}, function(data) {
					if (data.success) {
						playNext();
						let removeNode = currentVideo;
						if (currentVideo.parent().children(".menu-entry").length == 1) {
							removeNode = currentVideo.parent();
						}
						removeNode.remove();
					}
					else {
						alert("Oh noes, got an error! '" + data.message + "' (sorry)");
					}
				})
			}

			function toggleMarkedOnCurrentVideo() {
				let currentVideo = $(".menu-entry.selected").first();
				let isMarked = currentVideo.hasClass("marked");
				let url = (isMarked ? "/unmark" : "/mark");
				$.get(url, {"videoId": currentVideo.attr("video-id")}, function(data){
					if (data.success) {
						currentVideo.toggleClass("marked");
						updateStarButton();
					} else {
						alert("Oh noes, got an error! '" + data.message + "' (sorry)");
					}
				});
			}

			function updateStarButton() {
				let el = $(".menu-entry.selected").first();
				if ($(el).hasClass("marked")) {
					$("#star-button-icon").removeClass("far").addClass("fas");
					$("#star-button-text").html("Unstar");
				} else {
					$("#star-button-icon").removeClass("fas").addClass("far");
					$("#star-button-text").html("Star");
				}
			}

			function isMenuGroupHidden(el) {
				if (!$(el).hasClass('menu-group')) {
					el = $(el).parents('.menu-group').first();
				}
				return $(el).hasClass('hidden');
			}

			function toggleMenuGroup(el) {
				if (!$(el).hasClass('menu-group')) {
					el = $(el).parents('.menu-group').first();
				}
				$(el).toggleClass('hidden');
			}

			function scrollToMenu() {
				let isPortrait = (window.orientation == 0);
				if (isPortrait) {	// Scroll horizontally
					let baseScroll = $("#container-menu-content").scrollLeft();
					let scroll = baseScroll + $(".menu-entry.selected").first().offset().left-100;
					$("#container-menu-content").scrollLeft(Math.max(0, scroll));
				} else {			// Scroll vertically
					let baseScroll = $("#container-menu-content").scrollTop();
					let scroll = baseScroll + $(".menu-entry.selected").first().offset().top-150;
					$("#container-menu-content").scrollTop(Math.max(0, scroll));
				}
			}

			function doSync() {
				socket.emit('manual_sync');
				$("#container-overlay").show();
				$("#container-sync-status").show();
			}

			function hideSync() {
				$("#container-overlay").hide();
				$("#container-sync-status").hide();
			}

			function handleSyncStart(data) {
				let header = "<b>Starting new sync @ " + new Date().toISOString() + "</b><br/>";
				let el = $("#container-sync-status-log");
				el.append(header).scrollTop(el.height());
			}

			function handleSyncUpdate(data) {
				let el = $("#container-sync-status-log");
				el.append(data).append("<br/>").scrollTop(el.height());
			}

			function showSettings() {
				$("#container-overlay").show();
				$("#container-settings").show();
			}

			function closeSettings() {
				$("#container-overlay").hide();
				$("#container-settings").hide();
			}

			function handleOrientationChange(event) {
				let isPortrait = (window.orientation == 0);
				$("#switch-to-landscape-info").html(isPortrait ? "Try to use landscape mode for a better view!" : "");
				setTimeout(scrollToMenu, 200);
			}

			function updateSettings() {
				let grouping = $("#grouping-select").children("option:selected").val();
				let sorting = $("#sorting-select").children("option:selected").val();
				let groupsCollapsed = $("#groups-collapsed-select").children("option:selected").val();
				window.location.href = changeUrl({"grouping": grouping, "sorting": sorting, "groups_collapsed": groupsCollapsed});
			}

			function changeUrl(changeParams) {
				let url = window.location.href;
				let params = {};
				if (url.includes("?")) {
					let paramParts = url.substring(url.indexOf("?")+1).split("&");
					for (let param of paramParts) {
						if (param.trim().length > 0) {
							let parts = param.split("=");
							params[parts[0]] = parts[1];	
						}
					}
				}

				for (let key in changeParams) {
					params[key] = changeParams[key];
				}

				let newUrl = "/?";
				let firstParam = true;
				for (let key in params) {
					if (!firstParam) { newUrl += "&"; }
					newUrl += (key + "=" + params[key]);
					firstParam = false;
				}

				return newUrl;
			}
		</script>
	</body>
</html>